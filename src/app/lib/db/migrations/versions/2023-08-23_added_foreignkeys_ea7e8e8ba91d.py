# type: ignore
"""added foreignkeys

Revision ID: ea7e8e8ba91d
Revises: 8fcb0e5b296c
Create Date: 2023-08-23 15:12:37.258906

"""
import warnings

import sqlalchemy as sa
from alembic import op
from litestar.contrib.sqlalchemy.types import GUID, ORA_JSONB, DateTimeUTC
from sqlalchemy.dialects import postgresql

__all__ = ["downgrade", "upgrade", "schema_upgrades", "schema_downgrades", "data_upgrades", "data_downgrades"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB

# revision identifiers, used by Alembic.
revision = "ea7e8e8ba91d"
down_revision = "8fcb0e5b296c"
branch_labels = None
depends_on = None


def upgrade():
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()


def downgrade():
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()


def schema_upgrades():
    """Schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "business_product",
        sa.Column("key", sa.String(length=20), nullable=False),
        sa.Column("name", sa.String(length=60), nullable=False),
        sa.Column("id", sa.GUID(length=16), nullable=False),
        sa.Column("sa_orm_sentinel", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_business_product")),
        sa.UniqueConstraint("key", name=op.f("uq_business_product_key")),
        sa.UniqueConstraint("name", name=op.f("uq_business_product_name")),
    )
    op.drop_table("cpe_business_product")
    with op.batch_alter_table("cpe", schema=None) as batch_op:
        batch_op.add_column(sa.Column("vendor_id", sa.GUID(length=16), nullable=False))
        batch_op.add_column(sa.Column("service_id", sa.GUID(length=16), nullable=False))
        batch_op.create_foreign_key(
            batch_op.f("fk_cpe_vendor_id_vendor"), "vendor", ["vendor_id"], ["id"], ondelete="CASCADE"
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_cpe_service_id_business_product"),
            "business_product",
            ["service_id"],
            ["id"],
            ondelete="CASCADE",
        )

    with op.batch_alter_table("tscm_check", schema=None) as batch_op:
        batch_op.add_column(sa.Column("vendor_id", sa.GUID(length=16), nullable=False))
        batch_op.add_column(sa.Column("service_id", sa.GUID(length=16), nullable=False))
        batch_op.create_foreign_key(
            batch_op.f("fk_tscm_check_vendor_id_vendor"), "vendor", ["vendor_id"], ["id"], ondelete="CASCADE"
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_tscm_check_service_id_business_product"),
            "business_product",
            ["service_id"],
            ["id"],
            ondelete="CASCADE",
        )

    # ### end Alembic commands ###


def schema_downgrades():
    """Schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("tscm_check", schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f("fk_tscm_check_service_id_business_product"), type_="foreignkey")
        batch_op.drop_constraint(batch_op.f("fk_tscm_check_vendor_id_vendor"), type_="foreignkey")
        batch_op.drop_column("service_id")
        batch_op.drop_column("vendor_id")

    with op.batch_alter_table("cpe", schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f("fk_cpe_service_id_business_product"), type_="foreignkey")
        batch_op.drop_constraint(batch_op.f("fk_cpe_vendor_id_vendor"), type_="foreignkey")
        batch_op.drop_column("service_id")
        batch_op.drop_column("vendor_id")

    op.create_table(
        "cpe_business_product",
        sa.Column("key", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=60), autoincrement=False, nullable=False),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("sa_orm_sentinel", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="pk_cpe_business_product"),
        sa.UniqueConstraint("key", name="uq_cpe_business_product_key"),
        sa.UniqueConstraint("name", name="uq_cpe_business_product_name"),
    )
    op.drop_table("business_product")
    # ### end Alembic commands ###


def data_upgrades():
    """Add any optional data upgrade migrations here!"""


def data_downgrades():
    """Add any optional data downgrade migrations here!"""
